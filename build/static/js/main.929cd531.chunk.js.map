{"version":3,"sources":["Components/Home.tsx","services/quizApiService.ts","Components/QuestionCard.tsx","Components/Quiz.tsx","Components/Result.tsx","Route.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","root","fontFamily","alignContent","margin","width","height","backgroundColor","form","spacing","button","alignSelf","float","Home","classes","React","useState","value","setValue","name","setName","history","useHistory","localStorage","clear","setItem","submitForm","event","length","alert","push","FormControl","className","component","onSubmit","TextField","id","label","variant","required","onChange","target","RadioGroup","aria-label","FormControlLabel","control","Radio","style","marginTop","Button","color","onClick","getQuiz","questions","category","a","fetch","response","json","result","res","map","questionObj","question","answers","correct_answer","SimplePaper","callback","formControl","fontWeight","Cancelbutton","options","error","setError","helperText","setHelperText","handleSubmit","preventDefault","score","getItem","newScore","Number","newNulls","console","log","toString","qKeys","Object","keys","forEach","key","Paper","elevation","FormHelperText","Quiz","type","useParams","quiz","setQuiz","currentStep","setCurrentStep","useEffect","getResponse","QuestionCard","submitted","Result","nulls","wrong","percent","data","datasets","labels","slice","responsive","legend","position","title","display","text","animation","animateScale","animateRotate","RouteConfig","exact","path","App","require","config","Route","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.929cd531.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport Button from '@material-ui/core/Button';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '*':{\r\n      fontFamily: 'Bree Serif',\r\n    },\r\n    alignContent: 'center',\r\n    margin: 'auto',\r\n    width: \"40%\",\r\n    height: \"60%\",\r\n    backgroundColor: \"#00B7FC80\"\r\n  },\r\n  form: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n      width: '100%',\r\n      backgroundColor: \"#00B7FC80\"\r\n    },\r\n\r\n  },\r\n  button: {\r\n    alignSelf: 'center',\r\n    float: 'right',\r\n    margin: 'auto'\r\n  },\r\n\r\n}));\r\n\r\nexport default function Home() {\r\n\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState('Linux');\r\n  const [name, setName] = React.useState('');\r\n  // const [number, setNumber] = React.useState(0);\r\n  let history = useHistory();\r\n\r\n  localStorage.clear();\r\n  localStorage.setItem('name', name);\r\n  localStorage.setItem('score', \"0\");\r\n  localStorage.setItem('null', \"0\");\r\n\r\n\r\n  const handleChange = (event: any) => {\r\n    setValue(event.target.value);\r\n  };\r\n\r\n  const handleName = (event: any) => {\r\n    setName(event.target.value);\r\n  };\r\n\r\n  const submitForm = (event: any) => {\r\n    if (name.length === 0) {\r\n      alert(\"Please Provide Your Name\")\r\n    }\r\n\r\n    else {\r\n      // console.log(value)\r\n      history.push(`/quiz/${value}`);\r\n    }\r\n\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Boot&Camp Quiz Portal</h1>\r\n      <h2>Please Enter Your Name and Select Category of the Quiz You want to Give</h2>\r\n      <div>\r\n        <FormControl className={classes.root} component=\"fieldset\" onSubmit={submitForm}>\r\n          <TextField id=\"filled-basic\" label=\"Enter Your Name Here\" variant=\"filled\" value={name} required onChange={handleName} />\r\n          {/* <FormLabel component=\"legend\">Quiz Options</FormLabel> */}\r\n          <RadioGroup aria-label=\"gender\" name=\"gender1\" value={value} onChange={handleChange}>\r\n            <FormControlLabel value=\"Linux\" control={<Radio />} label=\"Linux\" />\r\n            <FormControlLabel value=\"DevOps\" control={<Radio />} label=\"DevOps\" />\r\n            <FormControlLabel value=\"Networking\" control={<Radio />} label=\"Networking\" />\r\n            <FormControlLabel value=\"Programming\" control={<Radio />} label=\"Programming\" />\r\n            <FormControlLabel value=\"Cloud\" control={<Radio />} label=\"Cloud\" />\r\n            <FormControlLabel value=\"Docker\" control={<Radio />} label=\"Docker\" />\r\n            <FormControlLabel value=\"Kubernetes\" control={<Radio />} label=\"Kubernetes\" />\r\n          </RadioGroup>\r\n        </FormControl>\r\n      </div>\r\n      <div style={{marginTop: '50px'}}>\r\n        <Button variant=\"contained\" color=\"secondary\" onClick={submitForm}>\r\n          Start Quiz\r\n      </Button>\r\n      </div>\r\n\r\n\r\n\r\n    </div>\r\n\r\n  );\r\n}\r\n","import { ResponseType,usedParams } from './../types/apiTypes'\r\n\r\nconst API_KEY = \"fAAdv3WPmAV85NCbY4pdfXvvy1Pare4PBA8DCDyy\";\r\nexport const getQuiz = async (questions: number, category: string) => {\r\n    const response = await fetch(`https://quizapi.io/api/v1/questions?apiKey=${API_KEY}&limit=${questions}&tag=${category}`);\r\n    const result = await response.json();\r\n    // console.log(result);\r\n    const res:usedParams[] = result.map((questionObj: ResponseType) => {\r\n        // if (questionObj.correct_answer !== null) {\r\n            return {\r\n                question: questionObj.question,\r\n                answers: questionObj.answers,\r\n                correct_answer: questionObj.correct_answer\r\n            }\r\n        // }\r\n\r\n    })\r\n    return res;\r\n}","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { quizParam } from './../types/apiTypes';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nconst SimplePaper: React.FC<quizParam> = ({ question, answers, correct_answer, callback }) => {\r\n    let [currentStep, setCurrentStep] = useState(0)\r\n\r\n    const useStyles = makeStyles((theme) => ({\r\n        root: {\r\n            '*':{\r\n                fontFamily: 'Bree Serif',\r\n              },\r\n            // alignSlef: 'center',\r\n            margin: 'auto',\r\n            // display: 'flex',\r\n            // flexWrap: 'wrap',\r\n            // '& > *': {\r\n            // margin: theme.spacing(1),\r\n            width: \"70%\",\r\n            height: \"60%\",\r\n            backgroundColor: \"#00B7FC80\"\r\n            // },\r\n        },\r\n        formControl: {\r\n            margin: theme.spacing(3),\r\n        },\r\n        button: {\r\n            margin: theme.spacing(1, 1, 0, 0),\r\n            backgroundColor: \"#00B7FC\",\r\n            color: 'white',\r\n            fontWeight: 'bold'\r\n        },\r\n        Cancelbutton: {\r\n            margin: theme.spacing(1, 1, 0, 0),\r\n            backgroundColor: \"#EC7063\",\r\n            color: 'white',\r\n            fontWeight: 'bold'\r\n        },\r\n        options: {\r\n            color: 'white',\r\n            fontWeight: 'bold'\r\n        },\r\n    }));\r\n\r\n    let history = useHistory();\r\n    const [value, setValue] = React.useState('');\r\n    const [error, setError] = React.useState(false);\r\n    // let [selectedAns, setSelectedAns] = useState(\"\");\r\n    const [helperText, setHelperText] = React.useState('Choose wisely');\r\n\r\n    const handleRadioChange = (event: any) => {\r\n        setValue(event.target.value);\r\n        setHelperText(' ');\r\n        setError(false);\r\n    };\r\n\r\n    const handleSubmit = (event: any) => {\r\n        event.preventDefault();\r\n        setValue(event.target.value);\r\n        var score = localStorage.getItem('score');\r\n        var newScore = Number(score);\r\n        var nulls = localStorage.getItem('null');\r\n        var newNulls = Number(score);\r\n        console.log(value);\r\n        if (value == null || value === '') {\r\n            alert('Please Choose an Option')\r\n        }\r\n        else {\r\n            if (correct_answer == null) {\r\n                newNulls++;\r\n                console.log(\"Null Value\", newNulls);\r\n            }\r\n            if (value === correct_answer) {\r\n                // setHelperText('You got it!');\r\n                // setError(false);\r\n                newScore++;\r\n            }\r\n            else {\r\n                // setHelperText('Sorry, wrong answer!');\r\n                // setError(true);\r\n            }\r\n            localStorage.setItem('score', newScore.toString());\r\n            localStorage.setItem('null', newNulls.toString());\r\n            callback(true)\r\n        }\r\n\r\n\r\n    };\r\n\r\n    const classes = useStyles();\r\n    const qKeys: string[] = []\r\n\r\n    Object.keys(answers).forEach(key => {\r\n        qKeys.push(key)\r\n    });\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n\r\n            <Paper className={classes.root} elevation={3} >\r\n                <h3>{question}</h3>\r\n                <form onSubmit={handleSubmit}>\r\n                    <FormControl component=\"fieldset\" error={error} className={classes.formControl}>\r\n                        <RadioGroup aria-label=\"quiz\" name=\"quiz\" value={value} onChange={handleRadioChange}>\r\n                            {\r\n                                qKeys.map((key) => {\r\n                                    if (answers[key] != null)\r\n                                        return (\r\n                                            <FormControlLabel className={classes.options} value={key} control={<Radio />} label={answers[key]} />\r\n                                        )\r\n                                })}\r\n\r\n                        </RadioGroup>\r\n                        <FormHelperText>{helperText}</FormHelperText>\r\n                    </FormControl>\r\n                </form>\r\n                <div>\r\n                    <Button variant=\"outlined\" color=\"primary\" className={classes.button} onClick={handleSubmit}>\r\n                        Next Question\r\n                        </Button>\r\n                    <Button variant=\"outlined\" color=\"primary\" className={classes.Cancelbutton} onClick={()=>{history.push('/')}}>\r\n                        Cancel Quiz\r\n                        </Button>\r\n                </div>\r\n            </Paper>\r\n            {/* <Paper />\r\n      <Paper elevation={3} /> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SimplePaper;\r\n","import React, { useEffect, useState } from 'react';\r\nimport './../App.css';\r\nimport { getQuiz } from \"./../services/quizApiService\";\r\nimport { usedParams } from './../types/apiTypes'\r\nimport QuestionCard from './QuestionCard'\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction Quiz() {\r\n  let {type} = useParams();\r\n  let history = useHistory();\r\n  // console.log(type)\r\n  let [quiz, setQuiz] = useState<usedParams[]>([])\r\n  let [currentStep, setCurrentStep] = useState(0)\r\n\r\n  const handleSubmit = (submitted: boolean) => {\r\n    const currentQuestion: usedParams = quiz[currentStep];\r\n\r\n    if (currentStep !== quiz.length - 1)\r\n      setCurrentStep(++currentStep);\r\n    else {\r\n      alert(\"Quiz Completed\");\r\n      history.push(\"/result\");\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    async function getResponse() {\r\n      const response: usedParams[] = await getQuiz(15, type);\r\n      console.log(response)\r\n      setQuiz(response)\r\n      console.log(quiz)\r\n    }\r\n    getResponse();\r\n  }, [])\r\n\r\n  if (!quiz.length)\r\n    return (<h3>Loading..................</h3>)\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>{type} Quiz</h1>\r\n      <h2>Question No. {currentStep+1}</h2>\r\n      <QuestionCard\r\n        question={quiz[currentStep].question}\r\n        answers={quiz[currentStep].answers}\r\n        correct_answer={quiz[currentStep].correct_answer}\r\n        callback={handleSubmit} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Quiz;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Doughnut } from 'react-chartjs-2';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport Button from '@material-ui/core/Button';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '*':{\r\n      fontFamily: 'Bree Serif',\r\n    },\r\n    alignContent: 'center',\r\n    margin: 'auto',\r\n    width: \"80%\",\r\n    height: \"80%\",\r\n    backgroundColor: \"#EAEDED98\"\r\n  },\r\n  form: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n      width: '100%',\r\n      backgroundColor: \"#00B7FC80\"\r\n    },\r\n\r\n  },\r\n  button: {\r\n    alignSelf: 'center',\r\n    float: 'right',\r\n    margin: 'auto',\r\n  },\r\n\r\n}));\r\n\r\nexport default function Result() {\r\n  let history = useHistory();\r\n  const classes = useStyles();\r\n  var name = localStorage.getItem('name');\r\n  var score = Number(localStorage.getItem('score'));\r\n  var nulls = Number(localStorage.getItem('null'));\r\n  var wrong = 30 - (score + nulls);\r\n  var percent = (score / (score + wrong))*100 ;\r\n\r\n\r\n    var data = {\r\n      datasets: [{\r\n        data: [\r\n          score,\r\n          wrong,\r\n          nulls,\r\n        ],\r\n        backgroundColor: [\r\n          '#1ABC9C',\r\n          '#EC7063',\r\n          '#DAF7A6',\r\n        ],\r\n        label: 'Quiz Result'\r\n      }],\r\n      labels: [\r\n        'Right Answers',\r\n        'Wrong Answers',\r\n        'Answer Unavailable',\r\n      ]\r\n    };\r\n   var options = {\r\n      responsive: true,\r\n      legend: {\r\n        position: 'top',\r\n      },\r\n      title: {\r\n        display: true,\r\n        text: 'Quiz Result'\r\n      },\r\n      animation: {\r\n        animateScale: true,\r\n        animateRotate: true\r\n      }\r\n    };\r\n\r\n\r\n\r\nreturn (\r\n  <div className={classes.root}>\r\n<h1>Quiz Result</h1>\r\n    <h2>Name = {name}</h2>\r\n<h2>Perccentage = {percent.toString().slice(0, 4)} %</h2>\r\n    <div >\r\n      <Doughnut data={data} options={options} />\r\n    </div>\r\n    <div style={{margin : '30px'}}>\r\n    <Button variant=\"contained\"  color=\"primary\" onClick={()=> {history.push('/')}}>\r\n          Go Back\r\n      </Button>\r\n    </div>\r\n  </div>\r\n);\r\n}\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n  } from \"react-router-dom\";\r\n\r\nimport Home from './Components/Home';\r\nimport Quiz from './Components/Quiz';\r\nimport Result from './Components/Result';\r\n// import NotFound from './Components/NotFound';\r\n\r\n\r\nfunction RouteConfig() {\r\n  return (\r\n    <div>\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home}></Route>\r\n          <Route exact path=\"/quiz/:type\" component={Quiz}></Route>\r\n          <Route exact path=\"/result\" component={Result}></Route>\r\n          <Route exact path=\"*\" component={Home}></Route>\r\n        </Switch>\r\n\r\n    </Router>\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RouteConfig;\r\n","import React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport RouteConfig from './Route'\nimport Quiz from './Components/Quiz'\n\nfunction App() {\n  require('dotenv').config()\n  return (\n    <div className=\"App\">\n      <RouteConfig />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}